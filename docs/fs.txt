Design
-------
  TOTAL_BLOCKS = 0x10000

  BLOCK_SIZE = 2048

  // BootBlock and SuperBlock
  RESERVED_BLOCKS = 2

  // 2048 / 32 = 64
  INODES_PER_BLOCK = BLOCK_SIZE / sizeof(Inode)

  // 2048 / 128 = 16
  DIR_ENTRIES_PER_BLOCK = BLOCK_SIZE / sizeof(DirectoryEntry)

  INODE_BLOCK_COUNT = ceil(SuperBlock.total_inodes / INODES_PER_BLOCK)


  // block 0
  BootBlock = struct {
    boot_code: [BLOCK_SIZE]u8,          // sets up for kernel, also validates SuperBlock
  }

  // block 1
  SuperBlock = struct {
    magic: [8]u8 = "TundraFS",
    version: u16 = 0,

    unallocated_data: u16,              // number of data blocks still unallocated
    total_inodes: u16,                  // total number of reserved inodes
    unallocated_inodes: u16,            // number of inodes still unallocated

    inode_bitmap_start: u16,            // block ptr to start of used inode bitmap
                                        // inode_bitmap must be INODE_BITMAP_LEN blocks long

    inode_bitmap_len: u16,              // ceil(INODE_BLOCK_COUNT / 8)

    data_bitmap_start: u16,             // block ptr to start of used data block bitmap,
                                        // must be directly after end of inode_bitmap
                                        // data_bitmap must be DATA_BITMAP_LEN blocks long

    data_bitmap_len: u16,               // ceil((TOTAL_BLOCKS - RESERVED_BLOCKS - inode_bitmap_len) / 8)

    first_inode_block: u16 = INODE_BITMAP_LEN + DATA_BITMAP_LEN + RESERVED_BLOCKS,
    first_data_block: u16 = first_inode_block + INODE_BLOCK_COUNT,
  }

Entry Formats
-------------

  // 32 bytes
  Inode = struct {
    valid: u1,                          // 1 if inode is valid, 0 if not
    kind: u3,                           // 0 = directory, 1 = regular file, 2 = symlink, 3+ = (reserved)
    access_level: u1,                   // if 1, requires elevated permissions to access
    readable: u1,
    writeable: u1,
    executable: u1,                     // if this bit is set, maximum file size is 0x8000

    hard_link_count: u16                // number of hard links associated with this inode, on 0, free
    used_block_count: u16,              // number of blocks associated with this inode

    file_size_upper: u8,                // upper 8 bits of file size in bytes
    file_size_lower: u16,               // lower 16 bits of file size in bytes

    // if a null block_ptr exists, all subsequent block_ptr entries are invalid
    direct_block_ptrs: [8]u16           // points to a data block, 0 if no block is associated
    indirect_block_ptr: u16,            // points to a block of direct_block_ptrs, 0 if no block is associated

    reserved: [6]u8,                    // (reserved)
  }

  DirectoryBlock = struct {
    entries: [DIR_ENTRIES_PER_BLOCK]DirectoryEntry
  }

  DirectoryEntry = struct {
    inode_id: u16,                      // id of the attached inode, 0 if invalid entry
    name: [126]u8,                      // null terminated
  }

